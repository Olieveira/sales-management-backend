datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model CategoriasProdutos {
  idCategoria Int        @id @default(autoincrement()) @map("id_categoria")
  nome        String
  produtos    Produto[]
  processos   Processo[]
}

model Produto {
  idProduto        Int                @id @default(autoincrement()) @map("id_produto")
  nome             String
  idCategoria      Int
  descricao        String?            @db.VarChar(230)
  unidade          String?            @db.VarChar(35)
  estoqueUn        Int?
  preco            Decimal?           @db.Decimal(10, 2)
  criadoEm         DateTime?          @map("criado_em") @db.Timestamp(6)
  ativo            Boolean?           @default(true)
  inativoEm        DateTime?          @map("inativo_em") @db.Timestamp(6)
  itensVenda       ItemVenda[]
  categoriaProduto CategoriasProdutos @relation(fields: [idCategoria], references: [idCategoria])
}

model StatusProcesso {
  idStatus  Int        @id @default(autoincrement()) @map("id_status")
  status    String?    @db.VarChar(45)
  processos Processo[]
}

model Processo {
  idProcesso       Int                @id @default(autoincrement()) @map("id_processo")
  nome             String             @db.VarChar(45)
  descricao        String?
  idStatus         Int
  idCategoria      Int
  criadoEm         DateTime
  categoriaProduto CategoriasProdutos @relation(fields: [idCategoria], references: [idCategoria])
  status           StatusProcesso     @relation(fields: [idStatus], references: [idStatus])
  etapas           Etapa[]
  EtapaMaterial    EtapaMaterial[]
}

model Fornecedor {
  idFornecedor Int       @id @default(autoincrement()) @map("id_fornecedor")
  nome         String    @db.VarChar(45)
  contato      String?   @db.VarChar(150)
  link         String?   @db.VarChar(255)
  materiais    Estoque[]
}

model Estoque {
  idMaterial      Int             @id @default(autoincrement()) @map("id_material")
  nome            String          @db.VarChar(35)
  quantidade      Int
  unidade         String?         @db.VarChar(10)
  estoqueMin      Int?
  criadoEm        DateTime        @map("criado_em") @db.Timestamp(6)
  idFornecedor    Int
  fornecedor      Fornecedor      @relation(fields: [idFornecedor], references: [idFornecedor])
  etapasMateriais EtapaMaterial[]
}

model StatusEtapa {
  idStatus Int     @id @default(autoincrement()) @map("id_status")
  status   String  @db.VarChar(45)
  etapas   Etapa[]
}

model Etapa {
  idEtapa         Int             @id @default(autoincrement()) @map("id_etapa")
  idProcesso      Int
  sequencia       Int?
  nome            String          @db.VarChar(45)
  descricao       String?
  idStatus        Int
  statusEtapa     StatusEtapa     @relation(fields: [idStatus], references: [idStatus])
  Processo        Processo?       @relation(fields: [idProcesso], references: [idProcesso])
  etapasMateriais EtapaMaterial[]
}

model EtapaMaterial {
  idEtapa    Int
  idProcesso Int
  idMaterial Int
  quantidade Int?
  etapa      Etapa    @relation(fields: [idEtapa], references: [idEtapa])
  processo   Processo @relation(fields: [idProcesso], references: [idProcesso])
  material   Estoque  @relation(fields: [idMaterial], references: [idMaterial])

  @@id([idEtapa, idMaterial])
}

model PlataformaVenda {
  idPlataforma Int     @id @default(autoincrement()) @map("id_plataforma")
  nome         String  @db.VarChar(45)
  linkHome     String? @db.VarChar(255)
  vendas       Venda[]
}

model StatusVenda {
  idStatus Int     @id @default(autoincrement()) @map("id_status")
  status   String
  vendas   Venda[]
}

model Venda {
  idVenda       Int             @id @default(autoincrement()) @map("id_venda")
  nomeComprador String          @db.VarChar(120)
  idPlataforma  Int
  idStatus      Int
  total         Decimal         @db.Decimal(10, 2)
  criadoEm      DateTime?       @map("criado_em") @db.Timestamp(6)
  plataforma    PlataformaVenda @relation(fields: [idPlataforma], references: [idPlataforma])
  status        StatusVenda     @relation(fields: [idStatus], references: [idStatus])
  itensVenda    ItemVenda[]
}

model ItemVenda {
  idVenda    Int
  idProduto  Int
  quantidade Int
  unidade    String? @db.VarChar(35)
  venda      Venda   @relation(fields: [idVenda], references: [idVenda], onDelete: Cascade)
  produto    Produto @relation(fields: [idProduto], references: [idProduto])

  @@id([idVenda, idProduto])
}
